const e=/[^><\/ ]+/,t=new RegExp(`${e.source}="[^"]*"`),r=new RegExp(`${e.source}='[^']*'`),c=new RegExp(`${e.source}`),n=new RegExp(`(${t.source})|(${r.source})|(${c.source})`),o=new RegExp(`(?<tagName>${e.source})`),s=new RegExp(`<${o.source}( +(?<attrs>${n.source}))* *>(?<children>.*?)${/<\/\k<tagName>>/.source}`),a=new RegExp(`${s.source}`,"g"),u=e=>{const t=(e=e.replace(/[\n\r]/g,"")).match(a),r=[];if(t)for(const e of t){const t=e.match(s),{tagName:c,children:o}=t.groups,a=t.groups.attrs||"",p={tag:c,attrs:[],children:[]};for(const e of a.match(new RegExp(n,"g"))||[]){let[t,r]=e.split("=");r=r?r.replace(/["']/g,""):"",p.attrs.push({key:t,value:r})}p.children=u(o),r.push(p)}else r.push({tag:"text",text:e,attrs:[],children:[]});return r},p=e=>{const t=document.createDocumentFragment();for(const r of e)if("text"===r.tag){const e=document.createTextNode(r.text);t.appendChild(e)}else{const e=document.createElement(r.tag);for(const t of r.attrs)e.setAttribute(t.key,t.value);e.appendChild(p(r.children)),t.appendChild(e)}return t},g=e=>{const t=u(e);return p(t)};export{g as transform};
